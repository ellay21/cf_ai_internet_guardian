{
  "version": 3,
  "sources": ["../../../src/worker.js", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-3FRZiT/middleware-insertion-facade.js", "../../../../../../AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts", "../bundle-3FRZiT/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\Ellay Mesud\\Pictures\\Cloudflare\\cf_ai_internet_guardian\\.wrangler\\tmp\\dev-KKVNhd",
  "sourcesContent": ["/**\r\n * Welcome to Cloudflare Workers! This is your first worker.\r\n *\r\n * - Run `npm run dev` in your terminal to start a development server\r\n * - Open a browser tab at http://localhost:8787/ to see your worker in action\r\n * - Run `npm run deploy` to publish your worker\r\n *\r\n * Learn more at https://developers.cloudflare.com/workers/\r\n */\r\n\r\n// Constants\r\nconst MAX_HISTORY_LENGTH = 10;\r\nconst AI_MODEL = \"@cf/meta/llama-3.1-8b-instruct\";\r\n\r\n// CORS headers for local development\r\nconst corsHeaders = {\r\n  \"Access-Control-Allow-Origin\": \"*\", // In production, restrict this to your frontend's domain\r\n  \"Access-Control-Allow-Methods\": \"POST, OPTIONS\",\r\n  \"Access-Control-Allow-Headers\": \"Content-Type\",\r\n};\r\n\r\n/**\r\n * Handles preflight OPTIONS requests for CORS.\r\n * @returns {Response} A response with CORS headers.\r\n */\r\nfunction handleOptionsRequest() {\r\n  return new Response(null, {\r\n    headers: corsHeaders,\r\n  });\r\n}\r\n\r\n/**\r\n * Responds with a JSON error message.\r\n * @param {string} message - The error message.\r\n * @param {number} status - The HTTP status code.\r\n * @returns {Response} A JSON response with the error.\r\n */\r\nfunction jsonError(message, status = 400) {\r\n  const error = {\r\n    error: message,\r\n  };\r\n  return new Response(JSON.stringify(error), {\r\n    status: status,\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      ...corsHeaders,\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * Updates the chat history in the KV store.\r\n * It keeps a running list of the last 10 queries and their responses.\r\n * @param {string} url - The URL that was analyzed.\r\n * @param {object} aiResponse - The response from the AI model.\r\n * @param {object} env - The worker's environment variables.\r\n */\r\nasync function updateChatHistory(url, aiResponse, env) {\r\n  const historyKey = \"chat_history\";\r\n  let history = [];\r\n\r\n  try {\r\n    // Get existing history\r\n    const existingHistory = await env.CHAT_MEMORY.get(historyKey, { type: \"json\" });\r\n    if (Array.isArray(existingHistory)) {\r\n      history = existingHistory;\r\n    }\r\n  } catch (e) {\r\n    console.error(\"Failed to retrieve or parse chat history from KV:\", e);\r\n    // Start with a fresh history if KV is corrupted or unavailable\r\n    history = [];\r\n  }\r\n\r\n  // Add new entry to the front\r\n  history.unshift({\r\n    query: url,\r\n    response: aiResponse,\r\n    timestamp: new Date().toISOString(),\r\n  });\r\n\r\n  // Trim history to the maximum allowed length\r\n  if (history.length > MAX_HISTORY_LENGTH) {\r\n    history = history.slice(0, MAX_HISTORY_LENGTH);\r\n  }\r\n\r\n  // Store the updated history back in KV\r\n  await env.CHAT_MEMORY.put(historyKey, JSON.stringify(history));\r\n}\r\n\r\n/**\r\n * Analyzes a URL for safety using Workers AI.\r\n * @param {string} url - The URL to analyze.\r\n * @param {object} env - The worker's environment variables.\r\n * @returns {Promise<object>} A promise that resolves to the AI's analysis.\r\n */\r\nasync function analyzeUrlWithAI(url, env) {\r\n  const prompt = `\r\n    Analyze the safety of the URL: \"${url}\".\r\n    Your task is to determine if the URL is safe or risky.\r\n    Provide your response as a JSON object with two keys:\r\n    1. \"analysis\": A single word, either \"safe\" or \"risky\".\r\n    2. \"reason\": A concise, one-sentence explanation for your analysis.\r\n    Do not include any other text or formatting in your response.\r\n  `;\r\n\r\n  const aiResponse = await env.AI.run(AI_MODEL, {\r\n    prompt: prompt,\r\n    stream: false,\r\n  });\r\n\r\n  try {\r\n    // The model should return a JSON string. We parse it.\r\n    return JSON.parse(aiResponse.response);\r\n  } catch (e) {\r\n    console.error(\"Failed to parse AI response as JSON:\", aiResponse.response);\r\n    // Fallback if the AI doesn't return perfect JSON\r\n    return {\r\n      analysis: \"unknown\",\r\n      reason: \"The AI response was not in the expected format. The raw response was: \" + aiResponse.response,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Handles the /api/analyze endpoint.\r\n * @param {Request} request - The incoming request.\r\n * @param {object} env - The worker's environment variables.\r\n * @returns {Promise<Response>} A promise that resolves to the response.\r\n */\r\nasync function handleApiAnalyzeRequest(request, env) {\r\n  if (request.method !== \"POST\") {\r\n    return jsonError(\"Method Not Allowed. Please use POST.\", 405);\r\n  }\r\n\r\n  let requestBody;\r\n  try {\r\n    requestBody = await request.json();\r\n  } catch (e) {\r\n    return jsonError(\"Invalid JSON in request body.\", 400);\r\n  }\r\n\r\n  const { url } = requestBody;\r\n\r\n  if (!url || typeof url !== \"string\") {\r\n    return jsonError('Missing or invalid \"url\" in request body.', 400);\r\n  }\r\n\r\n  try {\r\n    // Call the AI to analyze the URL\r\n    const aiAnalysis = await analyzeUrlWithAI(url, env);\r\n\r\n    // Store the query and response in KV (fire and forget)\r\n    // We don't wait for this to complete before responding to the user\r\n    // to keep the response time low.\r\n    await updateChatHistory(url, aiAnalysis, env);\r\n\r\n    // Return the analysis to the client\r\n    return new Response(JSON.stringify(aiAnalysis), {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        ...corsHeaders,\r\n      },\r\n    });\r\n  } catch (e) {\r\n    console.error(\"Error during AI analysis or KV operation:\", e);\r\n    return jsonError(\"An internal error occurred while analyzing the URL.\", 500);\r\n  }\r\n}\r\n\r\nexport default {\r\n  /**\r\n   * The main fetch handler for the worker.\r\n   * @param {Request} request - The incoming request.\r\n   * @param {object} env - The worker's environment variables.\r\n   * @param {object} ctx - The execution context.\r\n   * @returns {Promise<Response>} A promise that resolves to the response.\r\n   */\r\n  async fetch(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n\r\n    // Handle CORS preflight requests\r\n    if (request.method === \"OPTIONS\") {\r\n      return handleOptionsRequest();\r\n    }\r\n\r\n    // Route requests to the correct handler\r\n    if (url.pathname === \"/api/analyze\") {\r\n      return handleApiAnalyzeRequest(request, env);\r\n    }\r\n\r\n    // Default response for any other path\r\n    return new Response(\"Not Found\", {\r\n      status: 404,\r\n      headers: corsHeaders,\r\n    });\r\n  },\r\n};\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\Ellay Mesud\\\\Pictures\\\\Cloudflare\\\\cf_ai_internet_guardian\\\\src\\\\worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\Ellay Mesud\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\Ellay Mesud\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\Ellay Mesud\\\\Pictures\\\\Cloudflare\\\\cf_ai_internet_guardian\\\\src\\\\worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\Ellay Mesud\\\\Pictures\\\\Cloudflare\\\\cf_ai_internet_guardian\\\\.wrangler\\\\tmp\\\\bundle-3FRZiT\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\Ellay Mesud\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\Ellay Mesud\\\\Pictures\\\\Cloudflare\\\\cf_ai_internet_guardian\\\\.wrangler\\\\tmp\\\\bundle-3FRZiT\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\Ellay Mesud\\\\Pictures\\\\Cloudflare\\\\cf_ai_internet_guardian\\\\.wrangler\\\\tmp\\\\bundle-3FRZiT\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["jsonError"]
}
